#include "stdafx.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace std;
using namespace Json4CPP;
using namespace Json4CPP::Detail;

namespace Json4CPP::Test
{
  TEST_CLASS(ValueTest)
  {
    TEST_METHOD(TestGetType1)
    {
      auto pairs = vector<pair<VALUE, JsonType>>
      {
        { nullptr_t (), JsonType::Null    },
        { wstring   (), JsonType::String  },
        { bool      (), JsonType::Boolean },
        { double    (), JsonType::Real    },
        { int64_t   (), JsonType::Integer },
        { JsonObject(), JsonType::Object  },
        { JsonArray (), JsonType::Array   },
      };
      for (auto& [input, expected] : pairs)
      {
        Assert::AreEqual(expected, Value::GetType(input));
      }
    }

    TEST_METHOD(TestGetType2)
    {
      auto pairs = vector<pair<VALUE_BUILDER, JsonBuilderType>>
      {
        { nullptr_t (), JsonBuilderType::Null    },
        { wstring   (), JsonBuilderType::String  },
        { bool      (), JsonBuilderType::Boolean },
        { double    (), JsonBuilderType::Real    },
        { int64_t   (), JsonBuilderType::Integer },
        { JsonObject(), JsonBuilderType::Object  },
        { JsonArray (), JsonBuilderType::Array   },
        { vector<JsonBuilder>()                                                                     , JsonBuilderType::Empty  },
        { vector<JsonBuilder>{ JsonBuilder(L"Key"), JsonBuilder(L"Value") }                         , JsonBuilderType::Pair   },
        { vector<JsonBuilder>{ vector<JsonBuilder>{ JsonBuilder(L"Key0"), JsonBuilder(L"Value0") },
                               vector<JsonBuilder>{ JsonBuilder(L"Key1"), JsonBuilder(L"Value1") } }, JsonBuilderType::Object },
        { vector<JsonBuilder>{ JsonBuilder(1), JsonBuilder(2), JsonBuilder(3) }                     , JsonBuilderType::Array  },
      };
      for (auto& [input, expected] : pairs)
      {
        Assert::AreEqual(expected, Value::GetType(input));
      }
    }

    TEST_METHOD(TestValueEqual)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::IsTrue (Value::Equal(array1  , array1  ));
      Assert::IsFalse(Value::Equal(array1  , array2  ));
      Assert::IsFalse(Value::Equal(array1  , boolean1));
      Assert::IsFalse(Value::Equal(array1  , boolean2));
      Assert::IsFalse(Value::Equal(array1  , null    ));
      Assert::IsFalse(Value::Equal(array1  , number1 ));
      Assert::IsFalse(Value::Equal(array1  , number2 ));
      Assert::IsFalse(Value::Equal(array1  , numberi1));
      Assert::IsFalse(Value::Equal(array1  , numberi2));
      Assert::IsFalse(Value::Equal(array1  , object1 ));
      Assert::IsFalse(Value::Equal(array1  , object2 ));
      Assert::IsFalse(Value::Equal(array1  , string1 ));
      Assert::IsFalse(Value::Equal(array1  , string2 ));
      Assert::IsFalse(Value::Equal(array2  , array1  ));
      Assert::IsTrue (Value::Equal(array2  , array2  ));
      Assert::IsFalse(Value::Equal(array2  , boolean1));
      Assert::IsFalse(Value::Equal(array2  , boolean2));
      Assert::IsFalse(Value::Equal(array2  , null    ));
      Assert::IsFalse(Value::Equal(array2  , number1 ));
      Assert::IsFalse(Value::Equal(array2  , number2 ));
      Assert::IsFalse(Value::Equal(array2  , numberi1));
      Assert::IsFalse(Value::Equal(array2  , numberi2));
      Assert::IsFalse(Value::Equal(array2  , object1 ));
      Assert::IsFalse(Value::Equal(array2  , object2 ));
      Assert::IsFalse(Value::Equal(array2  , string1 ));
      Assert::IsFalse(Value::Equal(array2  , string2 ));
      Assert::IsFalse(Value::Equal(boolean1, array1  ));
      Assert::IsFalse(Value::Equal(boolean1, array2  ));
      Assert::IsTrue (Value::Equal(boolean1, boolean1));
      Assert::IsFalse(Value::Equal(boolean1, boolean2));
      Assert::IsFalse(Value::Equal(boolean1, null    ));
      Assert::IsTrue (Value::Equal(boolean1, number1 ));
      Assert::IsFalse(Value::Equal(boolean1, number2 ));
      Assert::IsTrue (Value::Equal(boolean1, numberi1));
      Assert::IsFalse(Value::Equal(boolean1, numberi2));
      Assert::IsFalse(Value::Equal(boolean1, object1 ));
      Assert::IsFalse(Value::Equal(boolean1, object2 ));
      Assert::IsFalse(Value::Equal(boolean1, string1 ));
      Assert::IsFalse(Value::Equal(boolean1, string2 ));
      Assert::IsFalse(Value::Equal(boolean2, array1  ));
      Assert::IsFalse(Value::Equal(boolean2, array2  ));
      Assert::IsFalse(Value::Equal(boolean2, boolean1));
      Assert::IsTrue (Value::Equal(boolean2, boolean2));
      Assert::IsFalse(Value::Equal(boolean2, null    ));
      Assert::IsFalse(Value::Equal(boolean2, number1 ));
      Assert::IsTrue (Value::Equal(boolean2, number2 ));
      Assert::IsFalse(Value::Equal(boolean2, numberi1));
      Assert::IsTrue (Value::Equal(boolean2, numberi2));
      Assert::IsFalse(Value::Equal(boolean2, object1 ));
      Assert::IsFalse(Value::Equal(boolean2, object2 ));
      Assert::IsFalse(Value::Equal(boolean2, string1 ));
      Assert::IsFalse(Value::Equal(boolean2, string2 ));
      Assert::IsFalse(Value::Equal(null    , array1  ));
      Assert::IsFalse(Value::Equal(null    , array2  ));
      Assert::IsFalse(Value::Equal(null    , boolean1));
      Assert::IsFalse(Value::Equal(null    , boolean2));
      Assert::IsTrue (Value::Equal(null    , null    ));
      Assert::IsFalse(Value::Equal(null    , number1 ));
      Assert::IsFalse(Value::Equal(null    , number2 ));
      Assert::IsFalse(Value::Equal(null    , numberi1));
      Assert::IsFalse(Value::Equal(null    , numberi2));
      Assert::IsFalse(Value::Equal(null    , object1 ));
      Assert::IsFalse(Value::Equal(null    , object2 ));
      Assert::IsFalse(Value::Equal(null    , string1 ));
      Assert::IsFalse(Value::Equal(null    , string2 ));
      Assert::IsFalse(Value::Equal(number1 , array1  ));
      Assert::IsFalse(Value::Equal(number1 , array2  ));
      Assert::IsTrue (Value::Equal(number1 , boolean1));
      Assert::IsFalse(Value::Equal(number1 , boolean2));
      Assert::IsFalse(Value::Equal(number1 , null    ));
      Assert::IsTrue (Value::Equal(number1 , number1 ));
      Assert::IsFalse(Value::Equal(number1 , number2 ));
      Assert::IsTrue (Value::Equal(number1 , numberi1));
      Assert::IsFalse(Value::Equal(number1 , numberi2));
      Assert::IsFalse(Value::Equal(number1 , object1 ));
      Assert::IsFalse(Value::Equal(number1 , object2 ));
      Assert::IsFalse(Value::Equal(number1 , string1 ));
      Assert::IsFalse(Value::Equal(number1 , string2 ));
      Assert::IsFalse(Value::Equal(number2 , array1  ));
      Assert::IsFalse(Value::Equal(number2 , array2  ));
      Assert::IsFalse(Value::Equal(number2 , boolean1));
      Assert::IsTrue (Value::Equal(number2 , boolean2));
      Assert::IsFalse(Value::Equal(number2 , null    ));
      Assert::IsFalse(Value::Equal(number2 , number1 ));
      Assert::IsTrue (Value::Equal(number2 , number2 ));
      Assert::IsFalse(Value::Equal(number2 , numberi1));
      Assert::IsTrue (Value::Equal(number2 , numberi2));
      Assert::IsFalse(Value::Equal(number2 , object1 ));
      Assert::IsFalse(Value::Equal(number2 , object2 ));
      Assert::IsFalse(Value::Equal(number2 , string1 ));
      Assert::IsFalse(Value::Equal(number2 , string2 ));
      Assert::IsFalse(Value::Equal(numberi1, array1  ));
      Assert::IsFalse(Value::Equal(numberi1, array2  ));
      Assert::IsTrue (Value::Equal(numberi1, boolean1));
      Assert::IsFalse(Value::Equal(numberi1, boolean2));
      Assert::IsFalse(Value::Equal(numberi1, null    ));
      Assert::IsTrue (Value::Equal(numberi1, number1 ));
      Assert::IsFalse(Value::Equal(numberi1, number2 ));
      Assert::IsTrue (Value::Equal(numberi1, numberi1));
      Assert::IsFalse(Value::Equal(numberi1, numberi2));
      Assert::IsFalse(Value::Equal(numberi1, object1 ));
      Assert::IsFalse(Value::Equal(numberi1, object2 ));
      Assert::IsFalse(Value::Equal(numberi1, string1 ));
      Assert::IsFalse(Value::Equal(numberi1, string2 ));
      Assert::IsFalse(Value::Equal(numberi2, array1  ));
      Assert::IsFalse(Value::Equal(numberi2, array2  ));
      Assert::IsFalse(Value::Equal(numberi2, boolean1));
      Assert::IsTrue (Value::Equal(numberi2, boolean2));
      Assert::IsFalse(Value::Equal(numberi2, null    ));
      Assert::IsFalse(Value::Equal(numberi2, number1 ));
      Assert::IsTrue (Value::Equal(numberi2, number2 ));
      Assert::IsFalse(Value::Equal(numberi2, numberi1));
      Assert::IsTrue (Value::Equal(numberi2, numberi2));
      Assert::IsFalse(Value::Equal(numberi2, object1 ));
      Assert::IsFalse(Value::Equal(numberi2, object2 ));
      Assert::IsFalse(Value::Equal(numberi2, string1 ));
      Assert::IsFalse(Value::Equal(numberi2, string2 ));
      Assert::IsFalse(Value::Equal(object1 , array1  ));
      Assert::IsFalse(Value::Equal(object1 , array2  ));
      Assert::IsFalse(Value::Equal(object1 , boolean1));
      Assert::IsFalse(Value::Equal(object1 , boolean2));
      Assert::IsFalse(Value::Equal(object1 , null    ));
      Assert::IsFalse(Value::Equal(object1 , number1 ));
      Assert::IsFalse(Value::Equal(object1 , number2 ));
      Assert::IsFalse(Value::Equal(object1 , numberi1));
      Assert::IsFalse(Value::Equal(object1 , numberi2));
      Assert::IsTrue (Value::Equal(object1 , object1 ));
      Assert::IsFalse(Value::Equal(object1 , object2 ));
      Assert::IsFalse(Value::Equal(object1 , string1 ));
      Assert::IsFalse(Value::Equal(object1 , string2 ));
      Assert::IsFalse(Value::Equal(object2 , array1  ));
      Assert::IsFalse(Value::Equal(object2 , array2  ));
      Assert::IsFalse(Value::Equal(object2 , boolean1));
      Assert::IsFalse(Value::Equal(object2 , boolean2));
      Assert::IsFalse(Value::Equal(object2 , null    ));
      Assert::IsFalse(Value::Equal(object2 , number1 ));
      Assert::IsFalse(Value::Equal(object2 , number2 ));
      Assert::IsFalse(Value::Equal(object2 , numberi1));
      Assert::IsFalse(Value::Equal(object2 , numberi2));
      Assert::IsFalse(Value::Equal(object2 , object1 ));
      Assert::IsTrue (Value::Equal(object2 , object2 ));
      Assert::IsFalse(Value::Equal(object2 , string1 ));
      Assert::IsFalse(Value::Equal(object2 , string2 ));
      Assert::IsFalse(Value::Equal(string1 , array1  ));
      Assert::IsFalse(Value::Equal(string1 , array2  ));
      Assert::IsFalse(Value::Equal(string1 , boolean1));
      Assert::IsFalse(Value::Equal(string1 , boolean2));
      Assert::IsFalse(Value::Equal(string1 , null    ));
      Assert::IsFalse(Value::Equal(string1 , number1 ));
      Assert::IsFalse(Value::Equal(string1 , number2 ));
      Assert::IsFalse(Value::Equal(string1 , numberi1));
      Assert::IsFalse(Value::Equal(string1 , numberi2));
      Assert::IsFalse(Value::Equal(string1 , object1 ));
      Assert::IsFalse(Value::Equal(string1 , object2 ));
      Assert::IsTrue (Value::Equal(string1 , string1 ));
      Assert::IsFalse(Value::Equal(string1 , string2 ));
      Assert::IsFalse(Value::Equal(string2 , array1  ));
      Assert::IsFalse(Value::Equal(string2 , array2  ));
      Assert::IsFalse(Value::Equal(string2 , boolean1));
      Assert::IsFalse(Value::Equal(string2 , boolean2));
      Assert::IsFalse(Value::Equal(string2 , null    ));
      Assert::IsFalse(Value::Equal(string2 , number1 ));
      Assert::IsFalse(Value::Equal(string2 , number2 ));
      Assert::IsFalse(Value::Equal(string2 , numberi1));
      Assert::IsFalse(Value::Equal(string2 , numberi2));
      Assert::IsFalse(Value::Equal(string2 , object1 ));
      Assert::IsFalse(Value::Equal(string2 , object2 ));
      Assert::IsFalse(Value::Equal(string2 , string1 ));
      Assert::IsTrue (Value::Equal(string2 , string2 ));
    }

    TEST_METHOD(TestValueNotEqual)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::IsFalse(Value::NotEqual(array1  , array1  ));
      Assert::IsTrue (Value::NotEqual(array1  , array2  ));
      Assert::IsTrue (Value::NotEqual(array1  , boolean1));
      Assert::IsTrue (Value::NotEqual(array1  , boolean2));
      Assert::IsTrue (Value::NotEqual(array1  , null    ));
      Assert::IsTrue (Value::NotEqual(array1  , number1 ));
      Assert::IsTrue (Value::NotEqual(array1  , number2 ));
      Assert::IsTrue (Value::NotEqual(array1  , numberi1));
      Assert::IsTrue (Value::NotEqual(array1  , numberi2));
      Assert::IsTrue (Value::NotEqual(array1  , object1 ));
      Assert::IsTrue (Value::NotEqual(array1  , object2 ));
      Assert::IsTrue (Value::NotEqual(array1  , string1 ));
      Assert::IsTrue (Value::NotEqual(array1  , string2 ));
      Assert::IsTrue (Value::NotEqual(array2  , array1  ));
      Assert::IsFalse(Value::NotEqual(array2  , array2  ));
      Assert::IsTrue (Value::NotEqual(array2  , boolean1));
      Assert::IsTrue (Value::NotEqual(array2  , boolean2));
      Assert::IsTrue (Value::NotEqual(array2  , null    ));
      Assert::IsTrue (Value::NotEqual(array2  , number1 ));
      Assert::IsTrue (Value::NotEqual(array2  , number2 ));
      Assert::IsTrue (Value::NotEqual(array2  , numberi1));
      Assert::IsTrue (Value::NotEqual(array2  , numberi2));
      Assert::IsTrue (Value::NotEqual(array2  , object1 ));
      Assert::IsTrue (Value::NotEqual(array2  , object2 ));
      Assert::IsTrue (Value::NotEqual(array2  , string1 ));
      Assert::IsTrue (Value::NotEqual(array2  , string2 ));
      Assert::IsTrue (Value::NotEqual(boolean1, array1  ));
      Assert::IsTrue (Value::NotEqual(boolean1, array2  ));
      Assert::IsFalse(Value::NotEqual(boolean1, boolean1));
      Assert::IsTrue (Value::NotEqual(boolean1, boolean2));
      Assert::IsTrue (Value::NotEqual(boolean1, null    ));
      Assert::IsFalse(Value::NotEqual(boolean1, number1 ));
      Assert::IsTrue (Value::NotEqual(boolean1, number2 ));
      Assert::IsFalse(Value::NotEqual(boolean1, numberi1));
      Assert::IsTrue (Value::NotEqual(boolean1, numberi2));
      Assert::IsTrue (Value::NotEqual(boolean1, object1 ));
      Assert::IsTrue (Value::NotEqual(boolean1, object2 ));
      Assert::IsTrue (Value::NotEqual(boolean1, string1 ));
      Assert::IsTrue (Value::NotEqual(boolean1, string2 ));
      Assert::IsTrue (Value::NotEqual(boolean2, array1  ));
      Assert::IsTrue (Value::NotEqual(boolean2, array2  ));
      Assert::IsTrue (Value::NotEqual(boolean2, boolean1));
      Assert::IsFalse(Value::NotEqual(boolean2, boolean2));
      Assert::IsTrue (Value::NotEqual(boolean2, null    ));
      Assert::IsTrue (Value::NotEqual(boolean2, number1 ));
      Assert::IsFalse(Value::NotEqual(boolean2, number2 ));
      Assert::IsTrue (Value::NotEqual(boolean2, numberi1));
      Assert::IsFalse(Value::NotEqual(boolean2, numberi2));
      Assert::IsTrue (Value::NotEqual(boolean2, object1 ));
      Assert::IsTrue (Value::NotEqual(boolean2, object2 ));
      Assert::IsTrue (Value::NotEqual(boolean2, string1 ));
      Assert::IsTrue (Value::NotEqual(boolean2, string2 ));
      Assert::IsTrue (Value::NotEqual(null    , array1  ));
      Assert::IsTrue (Value::NotEqual(null    , array2  ));
      Assert::IsTrue (Value::NotEqual(null    , boolean1));
      Assert::IsTrue (Value::NotEqual(null    , boolean2));
      Assert::IsFalse(Value::NotEqual(null    , null    ));
      Assert::IsTrue (Value::NotEqual(null    , number1 ));
      Assert::IsTrue (Value::NotEqual(null    , number2 ));
      Assert::IsTrue (Value::NotEqual(null    , numberi1));
      Assert::IsTrue (Value::NotEqual(null    , numberi2));
      Assert::IsTrue (Value::NotEqual(null    , object1 ));
      Assert::IsTrue (Value::NotEqual(null    , object2 ));
      Assert::IsTrue (Value::NotEqual(null    , string1 ));
      Assert::IsTrue (Value::NotEqual(null    , string2 ));
      Assert::IsTrue (Value::NotEqual(number1 , array1  ));
      Assert::IsTrue (Value::NotEqual(number1 , array2  ));
      Assert::IsFalse(Value::NotEqual(number1 , boolean1));
      Assert::IsTrue (Value::NotEqual(number1 , boolean2));
      Assert::IsTrue (Value::NotEqual(number1 , null    ));
      Assert::IsFalse(Value::NotEqual(number1 , number1 ));
      Assert::IsTrue (Value::NotEqual(number1 , number2 ));
      Assert::IsFalse(Value::NotEqual(number1 , numberi1));
      Assert::IsTrue (Value::NotEqual(number1 , numberi2));
      Assert::IsTrue (Value::NotEqual(number1 , object1 ));
      Assert::IsTrue (Value::NotEqual(number1 , object2 ));
      Assert::IsTrue (Value::NotEqual(number1 , string1 ));
      Assert::IsTrue (Value::NotEqual(number1 , string2 ));
      Assert::IsTrue (Value::NotEqual(number2 , array1  ));
      Assert::IsTrue (Value::NotEqual(number2 , array2  ));
      Assert::IsTrue (Value::NotEqual(number2 , boolean1));
      Assert::IsFalse(Value::NotEqual(number2 , boolean2));
      Assert::IsTrue (Value::NotEqual(number2 , null    ));
      Assert::IsTrue (Value::NotEqual(number2 , number1 ));
      Assert::IsFalse(Value::NotEqual(number2 , number2 ));
      Assert::IsTrue (Value::NotEqual(number2 , numberi1));
      Assert::IsFalse(Value::NotEqual(number2 , numberi2));
      Assert::IsTrue (Value::NotEqual(number2 , object1 ));
      Assert::IsTrue (Value::NotEqual(number2 , object2 ));
      Assert::IsTrue (Value::NotEqual(number2 , string1 ));
      Assert::IsTrue (Value::NotEqual(number2 , string2 ));
      Assert::IsTrue (Value::NotEqual(numberi1, array1  ));
      Assert::IsTrue (Value::NotEqual(numberi1, array2  ));
      Assert::IsFalse(Value::NotEqual(numberi1, boolean1));
      Assert::IsTrue (Value::NotEqual(numberi1, boolean2));
      Assert::IsTrue (Value::NotEqual(numberi1, null    ));
      Assert::IsFalse(Value::NotEqual(numberi1, number1 ));
      Assert::IsTrue (Value::NotEqual(numberi1, number2 ));
      Assert::IsFalse(Value::NotEqual(numberi1, numberi1));
      Assert::IsTrue (Value::NotEqual(numberi1, numberi2));
      Assert::IsTrue (Value::NotEqual(numberi1, object1 ));
      Assert::IsTrue (Value::NotEqual(numberi1, object2 ));
      Assert::IsTrue (Value::NotEqual(numberi1, string1 ));
      Assert::IsTrue (Value::NotEqual(numberi1, string2 ));
      Assert::IsTrue (Value::NotEqual(numberi2, array1  ));
      Assert::IsTrue (Value::NotEqual(numberi2, array2  ));
      Assert::IsTrue (Value::NotEqual(numberi2, boolean1));
      Assert::IsFalse(Value::NotEqual(numberi2, boolean2));
      Assert::IsTrue (Value::NotEqual(numberi2, null    ));
      Assert::IsTrue (Value::NotEqual(numberi2, number1 ));
      Assert::IsFalse(Value::NotEqual(numberi2, number2 ));
      Assert::IsTrue (Value::NotEqual(numberi2, numberi1));
      Assert::IsFalse(Value::NotEqual(numberi2, numberi2));
      Assert::IsTrue (Value::NotEqual(numberi2, object1 ));
      Assert::IsTrue (Value::NotEqual(numberi2, object2 ));
      Assert::IsTrue (Value::NotEqual(numberi2, string1 ));
      Assert::IsTrue (Value::NotEqual(numberi2, string2 ));
      Assert::IsTrue (Value::NotEqual(object1 , array1  ));
      Assert::IsTrue (Value::NotEqual(object1 , array2  ));
      Assert::IsTrue (Value::NotEqual(object1 , boolean1));
      Assert::IsTrue (Value::NotEqual(object1 , boolean2));
      Assert::IsTrue (Value::NotEqual(object1 , null    ));
      Assert::IsTrue (Value::NotEqual(object1 , number1 ));
      Assert::IsTrue (Value::NotEqual(object1 , number2 ));
      Assert::IsTrue (Value::NotEqual(object1 , numberi1));
      Assert::IsTrue (Value::NotEqual(object1 , numberi2));
      Assert::IsFalse(Value::NotEqual(object1 , object1 ));
      Assert::IsTrue (Value::NotEqual(object1 , object2 ));
      Assert::IsTrue (Value::NotEqual(object1 , string1 ));
      Assert::IsTrue (Value::NotEqual(object1 , string2 ));
      Assert::IsTrue (Value::NotEqual(object2 , array1  ));
      Assert::IsTrue (Value::NotEqual(object2 , array2  ));
      Assert::IsTrue (Value::NotEqual(object2 , boolean1));
      Assert::IsTrue (Value::NotEqual(object2 , boolean2));
      Assert::IsTrue (Value::NotEqual(object2 , null    ));
      Assert::IsTrue (Value::NotEqual(object2 , number1 ));
      Assert::IsTrue (Value::NotEqual(object2 , number2 ));
      Assert::IsTrue (Value::NotEqual(object2 , numberi1));
      Assert::IsTrue (Value::NotEqual(object2 , numberi2));
      Assert::IsTrue (Value::NotEqual(object2 , object1 ));
      Assert::IsFalse(Value::NotEqual(object2 , object2 ));
      Assert::IsTrue (Value::NotEqual(object2 , string1 ));
      Assert::IsTrue (Value::NotEqual(object2 , string2 ));
      Assert::IsTrue (Value::NotEqual(string1 , array1  ));
      Assert::IsTrue (Value::NotEqual(string1 , array2  ));
      Assert::IsTrue (Value::NotEqual(string1 , boolean1));
      Assert::IsTrue (Value::NotEqual(string1 , boolean2));
      Assert::IsTrue (Value::NotEqual(string1 , null    ));
      Assert::IsTrue (Value::NotEqual(string1 , number1 ));
      Assert::IsTrue (Value::NotEqual(string1 , number2 ));
      Assert::IsTrue (Value::NotEqual(string1 , numberi1));
      Assert::IsTrue (Value::NotEqual(string1 , numberi2));
      Assert::IsTrue (Value::NotEqual(string1 , object1 ));
      Assert::IsTrue (Value::NotEqual(string1 , object2 ));
      Assert::IsFalse(Value::NotEqual(string1 , string1 ));
      Assert::IsTrue (Value::NotEqual(string1 , string2 ));
      Assert::IsTrue (Value::NotEqual(string2 , array1  ));
      Assert::IsTrue (Value::NotEqual(string2 , array2  ));
      Assert::IsTrue (Value::NotEqual(string2 , boolean1));
      Assert::IsTrue (Value::NotEqual(string2 , boolean2));
      Assert::IsTrue (Value::NotEqual(string2 , null    ));
      Assert::IsTrue (Value::NotEqual(string2 , number1 ));
      Assert::IsTrue (Value::NotEqual(string2 , number2 ));
      Assert::IsTrue (Value::NotEqual(string2 , numberi1));
      Assert::IsTrue (Value::NotEqual(string2 , numberi2));
      Assert::IsTrue (Value::NotEqual(string2 , object1 ));
      Assert::IsTrue (Value::NotEqual(string2 , object2 ));
      Assert::IsTrue (Value::NotEqual(string2 , string1 ));
      Assert::IsFalse(Value::NotEqual(string2 , string2 ));
    }

    TEST_METHOD(TestValueLessThan)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , boolean2); });
      Assert::IsTrue (Value::LessThan(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , boolean2); });
      Assert::IsTrue (Value::LessThan(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, array2  ); });
      Assert::IsFalse(Value::LessThan(boolean1, boolean1));
      Assert::IsTrue (Value::LessThan(boolean1, boolean2));
      Assert::IsTrue (Value::LessThan(boolean1, null    ));
      Assert::IsFalse(Value::LessThan(boolean1, number1 ));
      Assert::IsTrue (Value::LessThan(boolean1, number2 ));
      Assert::IsFalse(Value::LessThan(boolean1, numberi1));
      Assert::IsTrue (Value::LessThan(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, array2  ); });
      Assert::IsFalse(Value::LessThan(boolean2, boolean1));
      Assert::IsFalse(Value::LessThan(boolean2, boolean2));
      Assert::IsTrue (Value::LessThan(boolean2, null    ));
      Assert::IsFalse(Value::LessThan(boolean2, number1 ));
      Assert::IsFalse(Value::LessThan(boolean2, number2 ));
      Assert::IsFalse(Value::LessThan(boolean2, numberi1));
      Assert::IsFalse(Value::LessThan(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(boolean2, string2 ); });
      Assert::IsFalse(Value::LessThan(null    , array1  ));
      Assert::IsFalse(Value::LessThan(null    , array2  ));
      Assert::IsFalse(Value::LessThan(null    , boolean1));
      Assert::IsFalse(Value::LessThan(null    , boolean2));
      Assert::IsFalse(Value::LessThan(null    , null    ));
      Assert::IsFalse(Value::LessThan(null    , number1 ));
      Assert::IsFalse(Value::LessThan(null    , number2 ));
      Assert::IsFalse(Value::LessThan(null    , numberi1));
      Assert::IsFalse(Value::LessThan(null    , numberi2));
      Assert::IsFalse(Value::LessThan(null    , object1 ));
      Assert::IsFalse(Value::LessThan(null    , object2 ));
      Assert::IsFalse(Value::LessThan(null    , string1 ));
      Assert::IsFalse(Value::LessThan(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , array2  ); });
      Assert::IsFalse(Value::LessThan(number1 , boolean1));
      Assert::IsTrue (Value::LessThan(number1 , boolean2));
      Assert::IsTrue (Value::LessThan(number1 , null    ));
      Assert::IsFalse(Value::LessThan(number1 , number1 ));
      Assert::IsTrue (Value::LessThan(number1 , number2 ));
      Assert::IsFalse(Value::LessThan(number1 , numberi1));
      Assert::IsTrue (Value::LessThan(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , array2  ); });
      Assert::IsFalse(Value::LessThan(number2 , boolean1));
      Assert::IsFalse(Value::LessThan(number2 , boolean2));
      Assert::IsTrue (Value::LessThan(number2 , null    ));
      Assert::IsFalse(Value::LessThan(number2 , number1 ));
      Assert::IsFalse(Value::LessThan(number2 , number2 ));
      Assert::IsFalse(Value::LessThan(number2 , numberi1));
      Assert::IsFalse(Value::LessThan(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, array2  ); });
      Assert::IsFalse(Value::LessThan(numberi1, boolean1));
      Assert::IsTrue (Value::LessThan(numberi1, boolean2));
      Assert::IsTrue (Value::LessThan(numberi1, null    ));
      Assert::IsFalse(Value::LessThan(numberi1, number1 ));
      Assert::IsTrue (Value::LessThan(numberi1, number2 ));
      Assert::IsFalse(Value::LessThan(numberi1, numberi1));
      Assert::IsTrue (Value::LessThan(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, array2  ); });
      Assert::IsFalse(Value::LessThan(numberi2, boolean1));
      Assert::IsFalse(Value::LessThan(numberi2, boolean2));
      Assert::IsTrue (Value::LessThan(numberi2, null    ));
      Assert::IsFalse(Value::LessThan(numberi2, number1 ));
      Assert::IsFalse(Value::LessThan(numberi2, number2 ));
      Assert::IsFalse(Value::LessThan(numberi2, numberi1));
      Assert::IsFalse(Value::LessThan(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , boolean2); });
      Assert::IsTrue (Value::LessThan(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , boolean2); });
      Assert::IsTrue (Value::LessThan(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , boolean2); });
      Assert::IsTrue (Value::LessThan(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string1 , object2 ); });
      Assert::IsFalse(Value::LessThan(string1 , string1 ));
      Assert::IsTrue (Value::LessThan(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , boolean2); });
      Assert::IsTrue (Value::LessThan(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThan(string2 , object2 ); });
      Assert::IsFalse(Value::LessThan(string2 , string1 ));
      Assert::IsFalse(Value::LessThan(string2 , string2 ));
    }

    TEST_METHOD(TestValueLessThanOrEqual)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, array2  ); });
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, null    ));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, number2 ));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, array2  ); });
      Assert::IsFalse(Value::LessThanOrEqual(boolean2, boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(boolean2, boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(boolean2, null    ));
      Assert::IsFalse(Value::LessThanOrEqual(boolean2, number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(boolean2, number2 ));
      Assert::IsFalse(Value::LessThanOrEqual(boolean2, numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(boolean2, string2 ); });
      Assert::IsFalse(Value::LessThanOrEqual(null    , array1  ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , array2  ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , boolean1));
      Assert::IsFalse(Value::LessThanOrEqual(null    , boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(null    , null    ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , number1 ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , number2 ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , numberi1));
      Assert::IsFalse(Value::LessThanOrEqual(null    , numberi2));
      Assert::IsFalse(Value::LessThanOrEqual(null    , object1 ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , object2 ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , string1 ));
      Assert::IsFalse(Value::LessThanOrEqual(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , array2  ); });
      Assert::IsTrue (Value::LessThanOrEqual(number1 , boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , null    ));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , number2 ));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , array2  ); });
      Assert::IsFalse(Value::LessThanOrEqual(number2 , boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(number2 , boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(number2 , null    ));
      Assert::IsFalse(Value::LessThanOrEqual(number2 , number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(number2 , number2 ));
      Assert::IsFalse(Value::LessThanOrEqual(number2 , numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, array2  ); });
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, null    ));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, number2 ));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, array2  ); });
      Assert::IsFalse(Value::LessThanOrEqual(numberi2, boolean1));
      Assert::IsTrue (Value::LessThanOrEqual(numberi2, boolean2));
      Assert::IsTrue (Value::LessThanOrEqual(numberi2, null    ));
      Assert::IsFalse(Value::LessThanOrEqual(numberi2, number1 ));
      Assert::IsTrue (Value::LessThanOrEqual(numberi2, number2 ));
      Assert::IsFalse(Value::LessThanOrEqual(numberi2, numberi1));
      Assert::IsTrue (Value::LessThanOrEqual(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string1 , object2 ); });
      Assert::IsTrue (Value::LessThanOrEqual(string1 , string1 ));
      Assert::IsTrue (Value::LessThanOrEqual(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , boolean2); });
      Assert::IsTrue (Value::LessThanOrEqual(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::LessThanOrEqual(string2 , object2 ); });
      Assert::IsFalse(Value::LessThanOrEqual(string2 , string1 ));
      Assert::IsTrue (Value::LessThanOrEqual(string2 , string2 ));
    }

    TEST_METHOD(TestValueGreaterThan)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , boolean2); });
      Assert::IsFalse(Value::GreaterThan(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , boolean2); });
      Assert::IsFalse(Value::GreaterThan(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, array2  ); });
      Assert::IsFalse(Value::GreaterThan(boolean1, boolean1));
      Assert::IsFalse(Value::GreaterThan(boolean1, boolean2));
      Assert::IsFalse(Value::GreaterThan(boolean1, null    ));
      Assert::IsFalse(Value::GreaterThan(boolean1, number1 ));
      Assert::IsFalse(Value::GreaterThan(boolean1, number2 ));
      Assert::IsFalse(Value::GreaterThan(boolean1, numberi1));
      Assert::IsFalse(Value::GreaterThan(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, array2  ); });
      Assert::IsTrue (Value::GreaterThan(boolean2, boolean1));
      Assert::IsFalse(Value::GreaterThan(boolean2, boolean2));
      Assert::IsFalse(Value::GreaterThan(boolean2, null    ));
      Assert::IsTrue (Value::GreaterThan(boolean2, number1 ));
      Assert::IsFalse(Value::GreaterThan(boolean2, number2 ));
      Assert::IsTrue (Value::GreaterThan(boolean2, numberi1));
      Assert::IsFalse(Value::GreaterThan(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(boolean2, string2 ); });
      Assert::IsTrue (Value::GreaterThan(null    , array1  ));
      Assert::IsTrue (Value::GreaterThan(null    , array2  ));
      Assert::IsTrue (Value::GreaterThan(null    , boolean1));
      Assert::IsTrue (Value::GreaterThan(null    , boolean2));
      Assert::IsFalse(Value::GreaterThan(null    , null    ));
      Assert::IsTrue (Value::GreaterThan(null    , number1 ));
      Assert::IsTrue (Value::GreaterThan(null    , number2 ));
      Assert::IsTrue (Value::GreaterThan(null    , numberi1));
      Assert::IsTrue (Value::GreaterThan(null    , numberi2));
      Assert::IsTrue (Value::GreaterThan(null    , object1 ));
      Assert::IsTrue (Value::GreaterThan(null    , object2 ));
      Assert::IsTrue (Value::GreaterThan(null    , string1 ));
      Assert::IsTrue (Value::GreaterThan(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , array2  ); });
      Assert::IsFalse(Value::GreaterThan(number1 , boolean1));
      Assert::IsFalse(Value::GreaterThan(number1 , boolean2));
      Assert::IsFalse(Value::GreaterThan(number1 , null    ));
      Assert::IsFalse(Value::GreaterThan(number1 , number1 ));
      Assert::IsFalse(Value::GreaterThan(number1 , number2 ));
      Assert::IsFalse(Value::GreaterThan(number1 , numberi1));
      Assert::IsFalse(Value::GreaterThan(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , array2  ); });
      Assert::IsTrue (Value::GreaterThan(number2 , boolean1));
      Assert::IsFalse(Value::GreaterThan(number2 , boolean2));
      Assert::IsFalse(Value::GreaterThan(number2 , null    ));
      Assert::IsTrue (Value::GreaterThan(number2 , number1 ));
      Assert::IsFalse(Value::GreaterThan(number2 , number2 ));
      Assert::IsTrue (Value::GreaterThan(number2 , numberi1));
      Assert::IsFalse(Value::GreaterThan(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, array2  ); });
      Assert::IsFalse(Value::GreaterThan(numberi1, boolean1));
      Assert::IsFalse(Value::GreaterThan(numberi1, boolean2));
      Assert::IsFalse(Value::GreaterThan(numberi1, null    ));
      Assert::IsFalse(Value::GreaterThan(numberi1, number1 ));
      Assert::IsFalse(Value::GreaterThan(numberi1, number2 ));
      Assert::IsFalse(Value::GreaterThan(numberi1, numberi1));
      Assert::IsFalse(Value::GreaterThan(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, array2  ); });
      Assert::IsTrue (Value::GreaterThan(numberi2, boolean1));
      Assert::IsFalse(Value::GreaterThan(numberi2, boolean2));
      Assert::IsFalse(Value::GreaterThan(numberi2, null    ));
      Assert::IsTrue (Value::GreaterThan(numberi2, number1 ));
      Assert::IsFalse(Value::GreaterThan(numberi2, number2 ));
      Assert::IsTrue (Value::GreaterThan(numberi2, numberi1));
      Assert::IsFalse(Value::GreaterThan(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , boolean2); });
      Assert::IsFalse(Value::GreaterThan(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , boolean2); });
      Assert::IsFalse(Value::GreaterThan(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , boolean2); });
      Assert::IsFalse(Value::GreaterThan(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string1 , object2 ); });
      Assert::IsFalse(Value::GreaterThan(string1 , string1 ));
      Assert::IsFalse(Value::GreaterThan(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , boolean2); });
      Assert::IsFalse(Value::GreaterThan(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThan(string2 , object2 ); });
      Assert::IsTrue (Value::GreaterThan(string2 , string1 ));
      Assert::IsFalse(Value::GreaterThan(string2 , string2 ));
    }

    TEST_METHOD(TestValueGreaterThanOrEqual)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean1, boolean1));
      Assert::IsFalse(Value::GreaterThanOrEqual(boolean1, boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(boolean1, null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean1, number1 ));
      Assert::IsFalse(Value::GreaterThanOrEqual(boolean1, number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean1, numberi1));
      Assert::IsFalse(Value::GreaterThanOrEqual(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean2, boolean1));
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean2, boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(boolean2, null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean2, number1 ));
      Assert::IsTrue(Value::GreaterThanOrEqual(boolean2, number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(boolean2,numberi1 ));
      Assert::IsTrue(Value::GreaterThanOrEqual(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(boolean2, string2 ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , array1  ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , array2  ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , boolean1));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , boolean2));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , number1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , numberi1));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , numberi2));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , object1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , object2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , string1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(number1 , boolean1));
      Assert::IsFalse(Value::GreaterThanOrEqual(number1 , boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(number1 , null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(number1 , number1 ));
      Assert::IsFalse(Value::GreaterThanOrEqual(number1 , number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(number1 , numberi1));
      Assert::IsFalse(Value::GreaterThanOrEqual(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , boolean1));
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(number2 , null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , number1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , numberi1));
      Assert::IsTrue (Value::GreaterThanOrEqual(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi1, boolean1));
      Assert::IsFalse(Value::GreaterThanOrEqual(numberi1, boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(numberi1, null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi1, number1 ));
      Assert::IsFalse(Value::GreaterThanOrEqual(numberi1, number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi1, numberi1));
      Assert::IsFalse(Value::GreaterThanOrEqual(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, array2  ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, boolean1));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, boolean2));
      Assert::IsFalse(Value::GreaterThanOrEqual(numberi2, null    ));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, number1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, number2 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, numberi1));
      Assert::IsTrue (Value::GreaterThanOrEqual(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string1 , object2 ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(string1 , string1 ));
      Assert::IsFalse(Value::GreaterThanOrEqual(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , boolean2); });
      Assert::IsFalse(Value::GreaterThanOrEqual(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::GreaterThanOrEqual(string2 , object2 ); });
      Assert::IsTrue (Value::GreaterThanOrEqual(string2 , string1 ));
      Assert::IsTrue (Value::GreaterThanOrEqual(string2 , string2 ));
    }

    TEST_METHOD(TestValueAdd)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::Add(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, array2  ); });
      Assert::AreEqual<VALUE>(0i64, Value::Add(boolean1, boolean1));
      Assert::AreEqual<VALUE>(1i64, Value::Add(boolean1, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(boolean1, null    ));
      Assert::AreEqual<VALUE>(0.0, Value::Add(boolean1, number1 ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(boolean1, number2 ));
      Assert::AreEqual<VALUE>(0i64, Value::Add(boolean1, numberi1));
      Assert::AreEqual<VALUE>(1i64, Value::Add(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, array2  ); });
      Assert::AreEqual<VALUE>(1i64, Value::Add(boolean2, boolean1));
      Assert::AreEqual<VALUE>(2i64, Value::Add(boolean2, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(boolean2, null    ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(boolean2, number1 ));
      Assert::AreEqual<VALUE>(2.0, Value::Add(boolean2, number2 ));
      Assert::AreEqual<VALUE>(1i64, Value::Add(boolean2, numberi1));
      Assert::AreEqual<VALUE>(2i64, Value::Add(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(boolean2, string2 ); });
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , array1  ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , array2  ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , boolean1));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , null    ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , number1 ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , number2 ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , numberi1));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , numberi2));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , object1 ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , object2 ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , string1 ));
      Assert::AreEqual<VALUE>(null    , Value::Add(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::Add(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(number1 , array2  ); });
      Assert::AreEqual<VALUE>(0.0, Value::Add(number1 , boolean1));
      Assert::AreEqual<VALUE>(1.0, Value::Add(number1 , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(number1 , null    ));
      Assert::AreEqual<VALUE>(0.0, Value::Add(number1 , number1 ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(number1 , number2 ));
      Assert::AreEqual<VALUE>(0.0, Value::Add(number1 , numberi1));
      Assert::AreEqual<VALUE>(1.0, Value::Add(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(number2 , array2  ); });
      Assert::AreEqual<VALUE>(1.0, Value::Add(number2 , boolean1));
      Assert::AreEqual<VALUE>(2.0, Value::Add(number2 , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(number2 , null    ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(number2 , number1 ));
      Assert::AreEqual<VALUE>(2.0, Value::Add(number2 , number2 ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(number2 , numberi1));
      Assert::AreEqual<VALUE>(2.0, Value::Add(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, array2  ); });
      Assert::AreEqual<VALUE>(0i64, Value::Add(numberi1, boolean1));
      Assert::AreEqual<VALUE>(1i64, Value::Add(numberi1, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(numberi1, null    ));
      Assert::AreEqual<VALUE>(0.0, Value::Add(numberi1, number1 ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(numberi1, number2 ));
      Assert::AreEqual<VALUE>(0i64, Value::Add(numberi1, numberi1));
      Assert::AreEqual<VALUE>(1i64, Value::Add(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, array2  ); });
      Assert::AreEqual<VALUE>(1i64, Value::Add(numberi2, boolean1));
      Assert::AreEqual<VALUE>(2i64, Value::Add(numberi2, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Add(numberi2, null    ));
      Assert::AreEqual<VALUE>(1.0, Value::Add(numberi2, number1 ));
      Assert::AreEqual<VALUE>(2.0, Value::Add(numberi2, number2 ));
      Assert::AreEqual<VALUE>(1i64, Value::Add(numberi2, numberi1));
      Assert::AreEqual<VALUE>(2i64, Value::Add(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string1 , object2 ); });
      Assert::AreEqual<VALUE>(L"TestString0TestString0"s, Value::Add(string1 , string1 ));
      Assert::AreEqual<VALUE>(L"TestString0TestString1"s, Value::Add(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::Add(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Add(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Add(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Add(string2 , object2 ); });
      Assert::AreEqual<VALUE>(L"TestString1TestString0"s, Value::Add(string2 , string1 ));
      Assert::AreEqual<VALUE>(L"TestString1TestString1"s, Value::Add(string2 , string2 ));
    }

    TEST_METHOD(TestValueAddAssign)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      VALUE value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(2i64, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(2i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(2.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(2.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(2i64, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(2i64, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, array1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, array2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, object1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, object2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, string1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, string2));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(2.0, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(2.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(2.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(2.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(2.0, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(2.0, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(2i64, Value::AddAssign(value, boolean2));
      Assert::AreEqual<VALUE>(2i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::AddAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(2.0, Value::AddAssign(value, number2));
      Assert::AreEqual<VALUE>(2.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::AddAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(2i64, Value::AddAssign(value, numberi2));
      Assert::AreEqual<VALUE>(2i64, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, string2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(L"TestString0TestString0"s, Value::AddAssign(value, string1));
      Assert::AreEqual<VALUE>(L"TestString0TestString0"s, value);
      value = string1;
      Assert::AreEqual<VALUE>(L"TestString0TestString1"s, Value::AddAssign(value, string2));
      Assert::AreEqual<VALUE>(L"TestString0TestString1"s, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, array2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(null, Value::AddAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, number2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::AddAssign(value, object2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(L"TestString1TestString0"s, Value::AddAssign(value, string1));
      Assert::AreEqual<VALUE>(L"TestString1TestString0"s, value);
      value = string2;
      Assert::AreEqual<VALUE>(L"TestString1TestString1"s, Value::AddAssign(value, string2));
      Assert::AreEqual<VALUE>(L"TestString1TestString1"s, value);
    }

    TEST_METHOD(TestValueSubtract)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(boolean1, boolean1));
      Assert::AreEqual<VALUE>(-1i64, Value::Subtract(boolean1, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(boolean1, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(boolean1, number1 ));
      Assert::AreEqual<VALUE>(-1.0 , Value::Subtract(boolean1, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(boolean1, numberi1));
      Assert::AreEqual<VALUE>(-1i64, Value::Subtract(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, array2  ); });
      Assert::AreEqual<VALUE>( 1i64, Value::Subtract(boolean2, boolean1));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(boolean2, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(boolean2, null    ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Subtract(boolean2, number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(boolean2, number2 ));
      Assert::AreEqual<VALUE>( 1i64, Value::Subtract(boolean2, numberi1));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(boolean2, string2 ); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , array1  ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , array2  ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , boolean1));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , null    ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , number1 ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , number2 ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , numberi1));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , numberi2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , object1 ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , object2 ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , string1 ));
      Assert::AreEqual<VALUE>(null , Value::Subtract(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , array2  ); });
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number1 , boolean1));
      Assert::AreEqual<VALUE>(-1.0 , Value::Subtract(number1 , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(number1 , null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number1 , number1 ));
      Assert::AreEqual<VALUE>(-1.0 , Value::Subtract(number1 , number2 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number1 , numberi1));
      Assert::AreEqual<VALUE>(-1.0 , Value::Subtract(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , array2  ); });
      Assert::AreEqual<VALUE>( 1.0 , Value::Subtract(number2 , boolean1));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number2 , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(number2 , null    ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Subtract(number2 , number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number2 , number2 ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Subtract(number2 , numberi1));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(numberi1, boolean1));
      Assert::AreEqual<VALUE>(-1i64, Value::Subtract(numberi1, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(numberi1, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(numberi1, number1 ));
      Assert::AreEqual<VALUE>(-1.0 , Value::Subtract(numberi1, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(numberi1, numberi1));
      Assert::AreEqual<VALUE>(-1i64, Value::Subtract(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, array2  ); });
      Assert::AreEqual<VALUE>( 1i64, Value::Subtract(numberi2, boolean1));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(numberi2, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Subtract(numberi2, null    ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Subtract(numberi2, number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Subtract(numberi2, number2 ));
      Assert::AreEqual<VALUE>( 1i64, Value::Subtract(numberi2, numberi1));
      Assert::AreEqual<VALUE>( 0i64, Value::Subtract(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Subtract(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Subtract(string2 , string2 ); });
    }

    TEST_METHOD(TestValueSubtractAssign)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      VALUE value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(-1i64, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(-1i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(-1.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(-1.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(-1i64, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(-1i64, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, array1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, array2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, object1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, object2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, string1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, string2));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(-1.0, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(-1.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(-1.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(-1.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(-1.0, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(-1.0, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(-1i64, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(-1i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(-1.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(-1.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(-1i64, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(-1i64, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::SubtractAssign(value, boolean1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::SubtractAssign(value, number1));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0.0, Value::SubtractAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::SubtractAssign(value, numberi1));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0i64, Value::SubtractAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, array2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(null, Value::SubtractAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, number2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, object2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::SubtractAssign(value, string2); });
      Assert::AreEqual<VALUE>(string2, value);
    }

    TEST_METHOD(TestValueMultiply)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean1, boolean1));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean1, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(boolean1, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(boolean1, number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(boolean1, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean1, numberi1));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean2, boolean1));
      Assert::AreEqual<VALUE>( 1i64, Value::Multiply(boolean2, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(boolean2, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(boolean2, number1 ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Multiply(boolean2, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(boolean2, numberi1));
      Assert::AreEqual<VALUE>( 1i64, Value::Multiply(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(boolean2, string2 ); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , array1  ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , array2  ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , boolean1));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , null    ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , number1 ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , number2 ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , numberi1));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , numberi2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , object1 ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , object2 ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , string1 ));
      Assert::AreEqual<VALUE>(null , Value::Multiply(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , array2  ); });
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , boolean1));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(number1 , null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , number2 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , numberi1));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , array2  ); });
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number2 , boolean1));
      Assert::AreEqual<VALUE>( 1.0 , Value::Multiply(number2 , boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(number2 , null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number2 , number1 ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Multiply(number2 , number2 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(number2 , numberi1));
      Assert::AreEqual<VALUE>( 1.0 , Value::Multiply(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi1, boolean1));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi1, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(numberi1, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(numberi1, number1 ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(numberi1, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi1, numberi1));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, array2  ); });
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi2, boolean1));
      Assert::AreEqual<VALUE>( 1i64, Value::Multiply(numberi2, boolean2));
      Assert::AreEqual<VALUE>(null , Value::Multiply(numberi2, null    ));
      Assert::AreEqual<VALUE>( 0.0 , Value::Multiply(numberi2, number1 ));
      Assert::AreEqual<VALUE>( 1.0 , Value::Multiply(numberi2, number2 ));
      Assert::AreEqual<VALUE>( 0i64, Value::Multiply(numberi2, numberi1));
      Assert::AreEqual<VALUE>( 1i64, Value::Multiply(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , boolean2); });
      Assert::AreEqual<VALUE>(null , Value::Multiply(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Multiply(string2 , string2 ); });
    }

    TEST_METHOD(TestValueMultiplyAssign)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      VALUE value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(1i64, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, array1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, array2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, object1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, object2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, string1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, string2));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, boolean1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::MultiplyAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0.0, Value::MultiplyAssign(value, number1));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::MultiplyAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(0i64, Value::MultiplyAssign(value, numberi1));
      Assert::AreEqual<VALUE>(0i64, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(1i64, Value::MultiplyAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1i64, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, array2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(null, Value::MultiplyAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, number2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, object2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::MultiplyAssign(value, string2); });
      Assert::AreEqual<VALUE>(string2, value);
    }

    TEST_METHOD(TestValueDivide)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::Divide(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(array1  , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(array2  , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Divide(boolean1, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(boolean1, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(boolean1, null    ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(boolean1, number1 ))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(boolean1, number2 ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(boolean1, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, array2  ); });
      Assert::IsTrue(isinf(get<double>(Value::Divide(boolean2, boolean1))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(boolean2, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(boolean2, null    ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(boolean2, number1 ))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(boolean2, number2 ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(boolean2, numberi1))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(boolean2, string2 ); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , array1  ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , array2  ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , boolean1));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , null    ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , number1 ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , number2 ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , numberi1));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , numberi2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , object1 ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , object2 ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , string1 ));
      Assert::AreEqual<VALUE>(null    , Value::Divide(null    , string2 ));
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Divide(number1 , boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(number1 , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(number1 , null    ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(number1 , number1 ))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(number1 , number2 ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(number1, numberi1 ))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(number1 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , array2  ); });
      Assert::IsTrue(isinf(get<double>(Value::Divide(number2 , boolean1))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(number2 , boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(number2 , null    ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(number2 , number1 ))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(number2 , number2 ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(number2, numberi1 ))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(number2 , numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Divide(numberi1, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(numberi1, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(numberi1, null    ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(numberi1, number1 ))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(numberi1, number2 ));
      Assert::IsTrue(isnan(get<double>(Value::Divide(numberi1, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Divide(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, array2  ); });
      Assert::IsTrue(isinf(get<double>(Value::Divide(numberi2, boolean1))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(numberi2, boolean2));
      Assert::AreEqual<VALUE>(null    , Value::Divide(numberi2, null    ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(numberi2, number1 ))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(numberi2, number2 ));
      Assert::IsTrue(isinf(get<double>(Value::Divide(numberi2, numberi1))));
      Assert::AreEqual<VALUE>(1.0, Value::Divide(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(numberi2, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(object1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(object2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(string1 , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string1 , object2 ); });
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString0"s), Value::Divide(string1 , string1 ));
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString1"s), Value::Divide(string1 , string2 ));
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , boolean2); });
      Assert::AreEqual<VALUE>(null    , Value::Divide(string2 , null    ));
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Divide(string2 , object2 ); });
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString0"s), Value::Divide(string2 , string1 ));
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString1"s), Value::Divide(string2 , string2 ));
    }

    TEST_METHOD(TestValueDivideAssign)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      VALUE value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, array1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, array2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, boolean1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, number1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, object1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, object2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, string1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, string2));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, boolean1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, boolean2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, number1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, number2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::IsTrue(isinf(get<double>(Value::DivideAssign(value, numberi1))));
      Assert::IsTrue(isinf(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(1.0, Value::DivideAssign(value, numberi2));
      Assert::AreEqual<VALUE>(1.0, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, string2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString0"s), Value::DivideAssign(value, string1));
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString0"s), value);
      value = string1;
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString1"s), Value::DivideAssign(value, string2));
      Assert::AreEqual<VALUE>(wstring(L"TestString0"s / L"TestString1"s), value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, array2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(null, Value::DivideAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, number2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::DivideAssign(value, object2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString0"s), Value::DivideAssign(value, string1));
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString0"s), value);
      value = string2;
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString1"s), Value::DivideAssign(value, string2));
      Assert::AreEqual<VALUE>(wstring(L"TestString1"s / L"TestString1"s), value);
    }

    TEST_METHOD(TestValueModulo)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(array1, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array1  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(array2, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(array2  , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean1, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean1, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(boolean1, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean1, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean1, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean1, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean1, string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean2, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean2, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(boolean2, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean2, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean2, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(boolean2, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(boolean2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(boolean2, string2 ); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, array1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, array2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, boolean1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, null));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, number1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, number2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, numberi1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, numberi2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, object1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, object2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, string1));
      Assert::AreEqual<VALUE>(null, Value::Modulo(null, string2));
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number1, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number1, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(number1, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number1, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number1, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number1, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number2, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number2, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(number2, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number2, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number2, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(number2, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(number2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(number2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi1, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi1, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(numberi1, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi1, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi1, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi1, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi1, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , array2  ); });
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi2, boolean1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi2, boolean2));
      Assert::AreEqual<VALUE>(null, Value::Modulo(numberi2, null));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi2, number1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi2, number2));
      Assert::IsTrue(isnan(get<double>(Value::Modulo(numberi2, numberi1))));
      Assert::AreEqual<VALUE>(0.0, Value::Modulo(numberi2, numberi2));
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(numberi2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(object1, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(object2, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(object2 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(string1, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string1 , string2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , array1  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , array2  ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , boolean1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , boolean2); });
      Assert::AreEqual<VALUE>(null, Value::Modulo(string2, null));
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , number1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , number2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , numberi1); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , numberi2); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , object1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , object2 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , string1 ); });
      Assert::ExpectException<exception>([&] { Value::Modulo(string2 , string2 ); });
    }

    TEST_METHOD(TestValueModuloAssign)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      VALUE value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(array1, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(array2, value);
      value = array2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(array2, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean1, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = boolean2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = boolean2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = boolean2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(boolean2, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, array1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, array2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, boolean1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, number1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, numberi1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, object1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, object2));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, string1));
      Assert::AreEqual<VALUE>(null, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, string2));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(number1, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = number2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = number2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(number2, value);
      value = number2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(number2, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi1;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi1, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, boolean1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, boolean2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = numberi2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, number1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, number2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi2;
      Assert::IsTrue(isnan(get<double>(Value::ModuloAssign(value, numberi1))));
      Assert::IsTrue(isnan(get<double>(value)));
      value = numberi2;
      Assert::AreEqual<VALUE>(0.0, Value::ModuloAssign(value, numberi2));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = numberi2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(numberi2, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(object1, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(object2, value);
      value = object2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(object2, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string1;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(string1, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, array2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, boolean2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::AreEqual<VALUE>(null, Value::ModuloAssign(value, null));
      Assert::AreEqual<VALUE>(null, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, number2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, numberi2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, object2); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string1); });
      Assert::AreEqual<VALUE>(string2, value);
      value = string2;
      Assert::ExpectException<exception>([&] { Value::ModuloAssign(value, string2); });
      Assert::AreEqual<VALUE>(string2, value);
    }

    TEST_METHOD(TestValueNegate)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      Assert::ExpectException<exception>([&] { Value::Negate(array); });
      Assert::AreEqual<VALUE>(-1i64, Value::Negate(boolean));
      Assert::AreEqual<VALUE>(null, Value::Negate(null));
      Assert::AreEqual<VALUE>(-1.0, Value::Negate(number));
      Assert::AreEqual<VALUE>(-1i64, Value::Negate(numberi));
      Assert::ExpectException<exception>([&] { Value::Negate(object); });
      Assert::ExpectException<exception>([&] { Value::Negate(string); });
    }

    TEST_METHOD(TestValueNot)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      Assert::ExpectException<exception>([&] { Value::Not(array); });
      Assert::AreEqual<VALUE>(!true, Value::Not(boolean));
      Assert::AreEqual<VALUE>(!nullptr, Value::Not(null));
      Assert::AreEqual<VALUE>(!1.0, Value::Not(number));
      Assert::AreEqual<VALUE>(!1i64, Value::Not(numberi));
      Assert::ExpectException<exception>([&] { Value::Not(object); });
      Assert::ExpectException<exception>([&] { Value::Not(string); });
    }

    TEST_METHOD(TestValuePreIncrement)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      VALUE value = array;
      Assert::ExpectException<exception>([&] { Value::PreIncrement(value); });
      Assert::AreEqual<VALUE>(array, value);
      value = boolean;
      Assert::ExpectException<exception>([&] { Value::PreIncrement(value); });
      Assert::AreEqual<VALUE>(boolean, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::PreIncrement(value));
      Assert::AreEqual<VALUE>(null, value);
      value = number;
      Assert::AreEqual<VALUE>(2.0, Value::PreIncrement(value));
      Assert::AreEqual<VALUE>(2.0, value);
      value = numberi;
      Assert::AreEqual<VALUE>(2i64, Value::PreIncrement(value));
      Assert::AreEqual<VALUE>(2i64, value);
      value = object;
      Assert::ExpectException<exception>([&] { Value::PreIncrement(value); });
      Assert::AreEqual<VALUE>(object, value);
      value = string;
      Assert::ExpectException<exception>([&] { Value::PreIncrement(value); });
      Assert::AreEqual<VALUE>(string, value);
    }

    TEST_METHOD(TestValuePostIncrement)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      VALUE value = array;
      Assert::ExpectException<exception>([&] { Value::PostIncrement(value); });
      Assert::AreEqual<VALUE>(array, value);
      value = boolean;
      Assert::ExpectException<exception>([&] { Value::PostIncrement(value); });
      Assert::AreEqual<VALUE>(boolean, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::PostIncrement(value));
      Assert::AreEqual<VALUE>(null, value);
      value = number;
      Assert::AreEqual<VALUE>(1.0, Value::PostIncrement(value));
      Assert::AreEqual<VALUE>(2.0, value);
      value = numberi;
      Assert::AreEqual<VALUE>(1i64, Value::PostIncrement(value));
      Assert::AreEqual<VALUE>(2i64, value);
      value = object;
      Assert::ExpectException<exception>([&] { Value::PostIncrement(value); });
      Assert::AreEqual<VALUE>(object, value);
      value = string;
      Assert::ExpectException<exception>([&] { Value::PostIncrement(value); });
      Assert::AreEqual<VALUE>(string, value);
    }

    TEST_METHOD(TestValuePreDecrement)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      VALUE value = array;
      Assert::ExpectException<exception>([&] { Value::PreDecrement(value); });
      Assert::AreEqual<VALUE>(array, value);
      value = boolean;
      Assert::ExpectException<exception>([&] { Value::PreDecrement(value); });
      Assert::AreEqual<VALUE>(boolean, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::PreDecrement(value));
      Assert::AreEqual<VALUE>(null, value);
      value = number;
      Assert::AreEqual<VALUE>(0.0, Value::PreDecrement(value));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi;
      Assert::AreEqual<VALUE>(0i64, Value::PreDecrement(value));
      Assert::AreEqual<VALUE>(0i64, value);
      value = object;
      Assert::ExpectException<exception>([&] { Value::PreDecrement(value); });
      Assert::AreEqual<VALUE>(object, value);
      value = string;
      Assert::ExpectException<exception>([&] { Value::PreDecrement(value); });
      Assert::AreEqual<VALUE>(string, value);
    }

    TEST_METHOD(TestValuePostDecrement)
    {
      VALUE null = nullptr;
      VALUE string = L"TestString"s;
      VALUE boolean = true;
      VALUE number = 1.0;
      VALUE numberi = 1i64;
      VALUE object = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE array = JsonArray{ 1, 2, 3 };

      VALUE value = array;
      Assert::ExpectException<exception>([&] { Value::PostDecrement(value); });
      Assert::AreEqual<VALUE>(array, value);
      value = boolean;
      Assert::ExpectException<exception>([&] { Value::PostDecrement(value); });
      Assert::AreEqual<VALUE>(boolean, value);
      value = null;
      Assert::AreEqual<VALUE>(null, Value::PostDecrement(value));
      Assert::AreEqual<VALUE>(null, value);
      value = number;
      Assert::AreEqual<VALUE>(1.0, Value::PostDecrement(value));
      Assert::AreEqual<VALUE>(0.0, value);
      value = numberi;
      Assert::AreEqual<VALUE>(1i64, Value::PostDecrement(value));
      Assert::AreEqual<VALUE>(0i64, value);
      value = object;
      Assert::ExpectException<exception>([&] { Value::PostDecrement(value); });
      Assert::AreEqual<VALUE>(object, value);
      value = string;
      Assert::ExpectException<exception>([&] { Value::PostDecrement(value); });
      Assert::AreEqual<VALUE>(string, value);
    }

    TEST_METHOD(TestValueLogicalAnd)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::IsTrue (Value::LogicalAnd(array1  , array1  ));
      Assert::IsTrue (Value::LogicalAnd(array1  , array2  ));
      Assert::IsFalse(Value::LogicalAnd(array1  , boolean1));
      Assert::IsTrue (Value::LogicalAnd(array1  , boolean2));
      Assert::IsFalse(Value::LogicalAnd(array1  , null    ));
      Assert::IsFalse(Value::LogicalAnd(array1  , number1 ));
      Assert::IsTrue (Value::LogicalAnd(array1  , number2 ));
      Assert::IsFalse(Value::LogicalAnd(array1  , numberi1));
      Assert::IsTrue (Value::LogicalAnd(array1  , numberi2));
      Assert::IsTrue (Value::LogicalAnd(array1  , object1 ));
      Assert::IsTrue (Value::LogicalAnd(array1  , object2 ));
      Assert::IsTrue (Value::LogicalAnd(array1  , string1 ));
      Assert::IsTrue (Value::LogicalAnd(array1  , string2 ));
      Assert::IsTrue (Value::LogicalAnd(array2  , array1  ));
      Assert::IsTrue (Value::LogicalAnd(array2  , array2  ));
      Assert::IsFalse(Value::LogicalAnd(array2  , boolean1));
      Assert::IsTrue (Value::LogicalAnd(array2  , boolean2));
      Assert::IsFalse(Value::LogicalAnd(array2  , null    ));
      Assert::IsFalse(Value::LogicalAnd(array2  , number1 ));
      Assert::IsTrue (Value::LogicalAnd(array2  , number2 ));
      Assert::IsFalse(Value::LogicalAnd(array2  , numberi1));
      Assert::IsTrue (Value::LogicalAnd(array2  , numberi2));
      Assert::IsTrue (Value::LogicalAnd(array2  , object1 ));
      Assert::IsTrue (Value::LogicalAnd(array2  , object2 ));
      Assert::IsTrue (Value::LogicalAnd(array2  , string1 ));
      Assert::IsTrue (Value::LogicalAnd(array2  , string2 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, array1  ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, array2  ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, boolean1));
      Assert::IsFalse(Value::LogicalAnd(boolean1, boolean2));
      Assert::IsFalse(Value::LogicalAnd(boolean1, null    ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, number1 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, number2 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, numberi1));
      Assert::IsFalse(Value::LogicalAnd(boolean1, numberi2));
      Assert::IsFalse(Value::LogicalAnd(boolean1, object1 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, object2 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, string1 ));
      Assert::IsFalse(Value::LogicalAnd(boolean1, string2 ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, array1  ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, array2  ));
      Assert::IsFalse(Value::LogicalAnd(boolean2, boolean1));
      Assert::IsTrue (Value::LogicalAnd(boolean2, boolean2));
      Assert::IsFalse(Value::LogicalAnd(boolean2, null    ));
      Assert::IsFalse(Value::LogicalAnd(boolean2, number1 ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, number2 ));
      Assert::IsFalse(Value::LogicalAnd(boolean2, numberi1));
      Assert::IsTrue (Value::LogicalAnd(boolean2, numberi2));
      Assert::IsTrue (Value::LogicalAnd(boolean2, object1 ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, object2 ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, string1 ));
      Assert::IsTrue (Value::LogicalAnd(boolean2, string2 ));
      Assert::IsFalse(Value::LogicalAnd(null    , array1  ));
      Assert::IsFalse(Value::LogicalAnd(null    , array2  ));
      Assert::IsFalse(Value::LogicalAnd(null    , boolean1));
      Assert::IsFalse(Value::LogicalAnd(null    , boolean2));
      Assert::IsFalse(Value::LogicalAnd(null    , null    ));
      Assert::IsFalse(Value::LogicalAnd(null    , number1 ));
      Assert::IsFalse(Value::LogicalAnd(null    , number2 ));
      Assert::IsFalse(Value::LogicalAnd(null    , numberi1));
      Assert::IsFalse(Value::LogicalAnd(null    , numberi2));
      Assert::IsFalse(Value::LogicalAnd(null    , object1 ));
      Assert::IsFalse(Value::LogicalAnd(null    , object2 ));
      Assert::IsFalse(Value::LogicalAnd(null    , string1 ));
      Assert::IsFalse(Value::LogicalAnd(null    , string2 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , array1  ));
      Assert::IsFalse(Value::LogicalAnd(number1 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(number1 , boolean1));
      Assert::IsFalse(Value::LogicalAnd(number1 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(number1 , null    ));
      Assert::IsFalse(Value::LogicalAnd(number1 , number1 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , numberi1));
      Assert::IsFalse(Value::LogicalAnd(number1 , numberi2));
      Assert::IsFalse(Value::LogicalAnd(number1 , object1 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , object2 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , string1 ));
      Assert::IsFalse(Value::LogicalAnd(number1 , string2 ));
      Assert::IsTrue (Value::LogicalAnd(number2 , array1  ));
      Assert::IsTrue (Value::LogicalAnd(number2 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(number2 , boolean1));
      Assert::IsTrue (Value::LogicalAnd(number2 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(number2 , null    ));
      Assert::IsFalse(Value::LogicalAnd(number2 , number1 ));
      Assert::IsTrue (Value::LogicalAnd(number2 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(number2 , numberi1));
      Assert::IsTrue (Value::LogicalAnd(number2 , numberi2));
      Assert::IsTrue (Value::LogicalAnd(number2 , object1 ));
      Assert::IsTrue (Value::LogicalAnd(number2 , object2 ));
      Assert::IsTrue (Value::LogicalAnd(number2 , string1 ));
      Assert::IsTrue (Value::LogicalAnd(number2 , string2 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, array1  ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, array2  ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, boolean1));
      Assert::IsFalse(Value::LogicalAnd(numberi1, boolean2));
      Assert::IsFalse(Value::LogicalAnd(numberi1, null    ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, number1 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, number2 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, numberi1));
      Assert::IsFalse(Value::LogicalAnd(numberi1, numberi2));
      Assert::IsFalse(Value::LogicalAnd(numberi1, object1 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, object2 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, string1 ));
      Assert::IsFalse(Value::LogicalAnd(numberi1, string2 ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, array1  ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, array2  ));
      Assert::IsFalse(Value::LogicalAnd(numberi2, boolean1));
      Assert::IsTrue (Value::LogicalAnd(numberi2, boolean2));
      Assert::IsFalse(Value::LogicalAnd(numberi2, null    ));
      Assert::IsFalse(Value::LogicalAnd(numberi2, number1 ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, number2 ));
      Assert::IsFalse(Value::LogicalAnd(numberi2, numberi1));
      Assert::IsTrue (Value::LogicalAnd(numberi2, numberi2));
      Assert::IsTrue (Value::LogicalAnd(numberi2, object1 ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, object2 ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, string1 ));
      Assert::IsTrue (Value::LogicalAnd(numberi2, string2 ));
      Assert::IsTrue (Value::LogicalAnd(object1 , array1  ));
      Assert::IsTrue (Value::LogicalAnd(object1 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(object1 , boolean1));
      Assert::IsTrue (Value::LogicalAnd(object1 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(object1 , null    ));
      Assert::IsFalse(Value::LogicalAnd(object1 , number1 ));
      Assert::IsTrue (Value::LogicalAnd(object1 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(object1 , numberi1));
      Assert::IsTrue (Value::LogicalAnd(object1 , numberi2));
      Assert::IsTrue (Value::LogicalAnd(object1 , object1 ));
      Assert::IsTrue (Value::LogicalAnd(object1 , object2 ));
      Assert::IsTrue (Value::LogicalAnd(object1 , string1 ));
      Assert::IsTrue (Value::LogicalAnd(object1 , string2 ));
      Assert::IsTrue (Value::LogicalAnd(object2 , array1  ));
      Assert::IsTrue (Value::LogicalAnd(object2 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(object2 , boolean1));
      Assert::IsTrue (Value::LogicalAnd(object2 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(object2 , null    ));
      Assert::IsFalse(Value::LogicalAnd(object2 , number1 ));
      Assert::IsTrue (Value::LogicalAnd(object2 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(object2 , numberi1));
      Assert::IsTrue (Value::LogicalAnd(object2 , numberi2));
      Assert::IsTrue (Value::LogicalAnd(object2 , object1 ));
      Assert::IsTrue (Value::LogicalAnd(object2 , object2 ));
      Assert::IsTrue (Value::LogicalAnd(object2 , string1 ));
      Assert::IsTrue (Value::LogicalAnd(object2 , string2 ));
      Assert::IsTrue (Value::LogicalAnd(string1 , array1  ));
      Assert::IsTrue (Value::LogicalAnd(string1 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(string1 , boolean1));
      Assert::IsTrue (Value::LogicalAnd(string1 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(string1 , null    ));
      Assert::IsFalse(Value::LogicalAnd(string1 , number1 ));
      Assert::IsTrue (Value::LogicalAnd(string1 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(string1 , numberi1));
      Assert::IsTrue (Value::LogicalAnd(string1 , numberi2));
      Assert::IsTrue (Value::LogicalAnd(string1 , object1 ));
      Assert::IsTrue (Value::LogicalAnd(string1 , object2 ));
      Assert::IsTrue (Value::LogicalAnd(string1 , string1 ));
      Assert::IsTrue (Value::LogicalAnd(string1 , string2 ));
      Assert::IsTrue (Value::LogicalAnd(string2 , array1  ));
      Assert::IsTrue (Value::LogicalAnd(string2 , array2  ));
      Assert::IsFalse(Value::LogicalAnd(string2 , boolean1));
      Assert::IsTrue (Value::LogicalAnd(string2 , boolean2));
      Assert::IsFalse(Value::LogicalAnd(string2 , null    ));
      Assert::IsFalse(Value::LogicalAnd(string2 , number1 ));
      Assert::IsTrue (Value::LogicalAnd(string2 , number2 ));
      Assert::IsFalse(Value::LogicalAnd(string2 , numberi1));
      Assert::IsTrue (Value::LogicalAnd(string2 , numberi2));
      Assert::IsTrue (Value::LogicalAnd(string2 , object1 ));
      Assert::IsTrue (Value::LogicalAnd(string2 , object2 ));
      Assert::IsTrue (Value::LogicalAnd(string2 , string1 ));
      Assert::IsTrue (Value::LogicalAnd(string2 , string2 ));
    }

    TEST_METHOD(TestValueLogicalOr)
    {
      VALUE null = nullptr;
      VALUE string1 = L"TestString0"s;
      VALUE string2 = L"TestString1"s;
      VALUE boolean1 = false;
      VALUE boolean2 = true;
      VALUE number1 = 0.0;
      VALUE number2 = 1.0;
      VALUE numberi1 = 0i64;
      VALUE numberi2 = 1i64;
      VALUE object1 = JsonObject{
        { L"key1", 1337 },
        { L"key2", 1338 }
      };
      VALUE object2 = JsonObject{
        { L"key3", 1339 },
        { L"key4", 1340 }
      };
      VALUE array1 = JsonArray{ 1, 2, 3 };
      VALUE array2 = JsonArray{ 4, 5, 6 };

      Assert::IsTrue (Value::LogicalOr(array1  , array1  ));
      Assert::IsTrue (Value::LogicalOr(array1  , array2  ));
      Assert::IsTrue (Value::LogicalOr(array1  , boolean1));
      Assert::IsTrue (Value::LogicalOr(array1  , boolean2));
      Assert::IsTrue (Value::LogicalOr(array1  , null    ));
      Assert::IsTrue (Value::LogicalOr(array1  , number1 ));
      Assert::IsTrue (Value::LogicalOr(array1  , number2 ));
      Assert::IsTrue (Value::LogicalOr(array1  , numberi1));
      Assert::IsTrue (Value::LogicalOr(array1  , numberi2));
      Assert::IsTrue (Value::LogicalOr(array1  , object1 ));
      Assert::IsTrue (Value::LogicalOr(array1  , object2 ));
      Assert::IsTrue (Value::LogicalOr(array1  , string1 ));
      Assert::IsTrue (Value::LogicalOr(array1  , string2 ));
      Assert::IsTrue (Value::LogicalOr(array2  , array1  ));
      Assert::IsTrue (Value::LogicalOr(array2  , array2  ));
      Assert::IsTrue (Value::LogicalOr(array2  , boolean1));
      Assert::IsTrue (Value::LogicalOr(array2  , boolean2));
      Assert::IsTrue (Value::LogicalOr(array2  , null    ));
      Assert::IsTrue (Value::LogicalOr(array2  , number1 ));
      Assert::IsTrue (Value::LogicalOr(array2  , number2 ));
      Assert::IsTrue (Value::LogicalOr(array2  , numberi1));
      Assert::IsTrue (Value::LogicalOr(array2  , numberi2));
      Assert::IsTrue (Value::LogicalOr(array2  , object1 ));
      Assert::IsTrue (Value::LogicalOr(array2  , object2 ));
      Assert::IsTrue (Value::LogicalOr(array2  , string1 ));
      Assert::IsTrue (Value::LogicalOr(array2  , string2 ));
      Assert::IsTrue (Value::LogicalOr(boolean1, array1  ));
      Assert::IsTrue (Value::LogicalOr(boolean1, array2  ));
      Assert::IsFalse(Value::LogicalOr(boolean1, boolean1));
      Assert::IsTrue (Value::LogicalOr(boolean1, boolean2));
      Assert::IsFalse(Value::LogicalOr(boolean1, null    ));
      Assert::IsFalse(Value::LogicalOr(boolean1, number1 ));
      Assert::IsTrue (Value::LogicalOr(boolean1, number2 ));
      Assert::IsFalse(Value::LogicalOr(boolean1, numberi1));
      Assert::IsTrue (Value::LogicalOr(boolean1, numberi2));
      Assert::IsTrue (Value::LogicalOr(boolean1, object1 ));
      Assert::IsTrue (Value::LogicalOr(boolean1, object2 ));
      Assert::IsTrue (Value::LogicalOr(boolean1, string1 ));
      Assert::IsTrue (Value::LogicalOr(boolean1, string2 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, array1  ));
      Assert::IsTrue (Value::LogicalOr(boolean2, array2  ));
      Assert::IsTrue (Value::LogicalOr(boolean2, boolean1));
      Assert::IsTrue (Value::LogicalOr(boolean2, boolean2));
      Assert::IsTrue (Value::LogicalOr(boolean2, null    ));
      Assert::IsTrue (Value::LogicalOr(boolean2, number1 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, number2 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, numberi1));
      Assert::IsTrue (Value::LogicalOr(boolean2, numberi2));
      Assert::IsTrue (Value::LogicalOr(boolean2, object1 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, object2 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, string1 ));
      Assert::IsTrue (Value::LogicalOr(boolean2, string2 ));
      Assert::IsTrue (Value::LogicalOr(null    , array1  ));
      Assert::IsTrue (Value::LogicalOr(null    , array2  ));
      Assert::IsFalse(Value::LogicalOr(null    , boolean1));
      Assert::IsTrue (Value::LogicalOr(null    , boolean2));
      Assert::IsFalse(Value::LogicalOr(null    , null    ));
      Assert::IsFalse(Value::LogicalOr(null    , number1 ));
      Assert::IsTrue (Value::LogicalOr(null    , number2 ));
      Assert::IsFalse(Value::LogicalOr(null    , numberi1));
      Assert::IsTrue (Value::LogicalOr(null    , numberi2));
      Assert::IsTrue (Value::LogicalOr(null    , object1 ));
      Assert::IsTrue (Value::LogicalOr(null    , object2 ));
      Assert::IsTrue (Value::LogicalOr(null    , string1 ));
      Assert::IsTrue (Value::LogicalOr(null    , string2 ));
      Assert::IsTrue (Value::LogicalOr(number1 , array1  ));
      Assert::IsTrue (Value::LogicalOr(number1 , array2  ));
      Assert::IsFalse(Value::LogicalOr(number1 , boolean1));
      Assert::IsTrue (Value::LogicalOr(number1 , boolean2));
      Assert::IsFalse(Value::LogicalOr(number1 , null    ));
      Assert::IsFalse(Value::LogicalOr(number1 , number1 ));
      Assert::IsTrue (Value::LogicalOr(number1 , number2 ));
      Assert::IsFalse(Value::LogicalOr(number1 , numberi1));
      Assert::IsTrue (Value::LogicalOr(number1 , numberi2));
      Assert::IsTrue (Value::LogicalOr(number1 , object1 ));
      Assert::IsTrue (Value::LogicalOr(number1 , object2 ));
      Assert::IsTrue (Value::LogicalOr(number1 , string1 ));
      Assert::IsTrue (Value::LogicalOr(number1 , string2 ));
      Assert::IsTrue (Value::LogicalOr(number2 , array1  ));
      Assert::IsTrue (Value::LogicalOr(number2 , array2  ));
      Assert::IsTrue (Value::LogicalOr(number2 , boolean1));
      Assert::IsTrue (Value::LogicalOr(number2 , boolean2));
      Assert::IsTrue (Value::LogicalOr(number2 , null    ));
      Assert::IsTrue (Value::LogicalOr(number2 , number1 ));
      Assert::IsTrue (Value::LogicalOr(number2 , number2 ));
      Assert::IsTrue (Value::LogicalOr(number2 , numberi1));
      Assert::IsTrue (Value::LogicalOr(number2 , numberi2));
      Assert::IsTrue (Value::LogicalOr(number2 , object1 ));
      Assert::IsTrue (Value::LogicalOr(number2 , object2 ));
      Assert::IsTrue (Value::LogicalOr(number2 , string1 ));
      Assert::IsTrue (Value::LogicalOr(number2 , string2 ));
      Assert::IsTrue (Value::LogicalOr(numberi1, array1  ));
      Assert::IsTrue (Value::LogicalOr(numberi1, array2  ));
      Assert::IsFalse(Value::LogicalOr(numberi1, boolean1));
      Assert::IsTrue (Value::LogicalOr(numberi1, boolean2));
      Assert::IsFalse(Value::LogicalOr(numberi1, null    ));
      Assert::IsFalse(Value::LogicalOr(numberi1, number1 ));
      Assert::IsTrue (Value::LogicalOr(numberi1, number2 ));
      Assert::IsFalse(Value::LogicalOr(numberi1, numberi1));
      Assert::IsTrue (Value::LogicalOr(numberi1, numberi2));
      Assert::IsTrue (Value::LogicalOr(numberi1, object1 ));
      Assert::IsTrue (Value::LogicalOr(numberi1, object2 ));
      Assert::IsTrue (Value::LogicalOr(numberi1, string1 ));
      Assert::IsTrue (Value::LogicalOr(numberi1, string2 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, array1  ));
      Assert::IsTrue (Value::LogicalOr(numberi2, array2  ));
      Assert::IsTrue (Value::LogicalOr(numberi2, boolean1));
      Assert::IsTrue (Value::LogicalOr(numberi2, boolean2));
      Assert::IsTrue (Value::LogicalOr(numberi2, null    ));
      Assert::IsTrue (Value::LogicalOr(numberi2, number1 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, number2 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, numberi1));
      Assert::IsTrue (Value::LogicalOr(numberi2, numberi2));
      Assert::IsTrue (Value::LogicalOr(numberi2, object1 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, object2 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, string1 ));
      Assert::IsTrue (Value::LogicalOr(numberi2, string2 ));
      Assert::IsTrue (Value::LogicalOr(object1 , array1  ));
      Assert::IsTrue (Value::LogicalOr(object1 , array2  ));
      Assert::IsTrue (Value::LogicalOr(object1 , boolean1));
      Assert::IsTrue (Value::LogicalOr(object1 , boolean2));
      Assert::IsTrue (Value::LogicalOr(object1 , null    ));
      Assert::IsTrue (Value::LogicalOr(object1 , number1 ));
      Assert::IsTrue (Value::LogicalOr(object1 , number2 ));
      Assert::IsTrue (Value::LogicalOr(object1 , numberi1));
      Assert::IsTrue (Value::LogicalOr(object1 , numberi2));
      Assert::IsTrue (Value::LogicalOr(object1 , object1 ));
      Assert::IsTrue (Value::LogicalOr(object1 , object2 ));
      Assert::IsTrue (Value::LogicalOr(object1 , string1 ));
      Assert::IsTrue (Value::LogicalOr(object1 , string2 ));
      Assert::IsTrue (Value::LogicalOr(object2 , array1  ));
      Assert::IsTrue (Value::LogicalOr(object2 , array2  ));
      Assert::IsTrue (Value::LogicalOr(object2 , boolean1));
      Assert::IsTrue (Value::LogicalOr(object2 , boolean2));
      Assert::IsTrue (Value::LogicalOr(object2 , null    ));
      Assert::IsTrue (Value::LogicalOr(object2 , number1 ));
      Assert::IsTrue (Value::LogicalOr(object2 , number2 ));
      Assert::IsTrue (Value::LogicalOr(object2 , numberi1));
      Assert::IsTrue (Value::LogicalOr(object2 , numberi2));
      Assert::IsTrue (Value::LogicalOr(object2 , object1 ));
      Assert::IsTrue (Value::LogicalOr(object2 , object2 ));
      Assert::IsTrue (Value::LogicalOr(object2 , string1 ));
      Assert::IsTrue (Value::LogicalOr(object2 , string2 ));
      Assert::IsTrue (Value::LogicalOr(string1 , array1  ));
      Assert::IsTrue (Value::LogicalOr(string1 , array2  ));
      Assert::IsTrue (Value::LogicalOr(string1 , boolean1));
      Assert::IsTrue (Value::LogicalOr(string1 , boolean2));
      Assert::IsTrue (Value::LogicalOr(string1 , null    ));
      Assert::IsTrue (Value::LogicalOr(string1 , number1 ));
      Assert::IsTrue (Value::LogicalOr(string1 , number2 ));
      Assert::IsTrue (Value::LogicalOr(string1 , numberi2));
      Assert::IsTrue (Value::LogicalOr(string1 , numberi2));
      Assert::IsTrue (Value::LogicalOr(string1 , object1 ));
      Assert::IsTrue (Value::LogicalOr(string1 , object2 ));
      Assert::IsTrue (Value::LogicalOr(string1 , string1 ));
      Assert::IsTrue (Value::LogicalOr(string1 , string2 ));
      Assert::IsTrue (Value::LogicalOr(string2 , array1  ));
      Assert::IsTrue (Value::LogicalOr(string2 , array2  ));
      Assert::IsTrue (Value::LogicalOr(string2 , boolean1));
      Assert::IsTrue (Value::LogicalOr(string2 , boolean2));
      Assert::IsTrue (Value::LogicalOr(string2 , null    ));
      Assert::IsTrue (Value::LogicalOr(string2 , number1 ));
      Assert::IsTrue (Value::LogicalOr(string2 , number2 ));
      Assert::IsTrue (Value::LogicalOr(string2 , numberi1));
      Assert::IsTrue (Value::LogicalOr(string2 , numberi2));
      Assert::IsTrue (Value::LogicalOr(string2 , object1 ));
      Assert::IsTrue (Value::LogicalOr(string2 , object2 ));
      Assert::IsTrue (Value::LogicalOr(string2 , string1 ));
      Assert::IsTrue (Value::LogicalOr(string2 , string2 ));
    }
  };
}